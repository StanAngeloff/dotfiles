#!/bin/sh

# Abort immediately if any command exists with a non-zero code.
set -e

# Do we need 'sudo'?
sudo=
if [ "$( id -u )" != 0 ]; then
  sudo='sudo'
fi

# Ensure Chromium is in the expected location. We could provide command-line
# arguments for that, but the whole purpose of this script is to start Chromium
# in the fastest possible way without any hassle.
CHROME_DEVEL_PATH='/opt/chrome-linux'
if [ ! -d "$CHROME_DEVEL_PATH" ]; then
  echo "[ERROR] You must have a copy of Chromium in '${CHROME_DEVEL_PATH}'." 1>&2
  echo '[ERROR] Please update this script if you have downloaded a copy elsewhere.' 1>&2
  exit 1
fi

# Tell Chromium to use a sandbox.
export CHROME_DEVEL_SANDBOX="${CHROME_DEVEL_PATH}/chrome_sandbox"

# Chromium is very picky about who owns what and in which mode, set it up properly.
if [ ! "$( stat -c'%f' "$CHROME_DEVEL_SANDBOX" | tr -d '\n' )" = '89ed' ]; then
  echo -n "[INFO] The '${CHROME_DEVEL_SANDBOX}' file mode needs to be updated... "
  $sudo chmod 4755 "$CHROME_DEVEL_SANDBOX"
  echo 'OK'
  echo '[INFO] Start this script again to continue.'
  exit 0
fi

if [ ! "$( stat -c'%g:%u' "$CHROME_DEVEL_SANDBOX" | tr -d '\n' )" = '0:0' ]; then
  echo -n "[INFO] The '${CHROME_DEVEL_SANDBOX}' binary owner needs to be updated... "
  $sudo chown root:root "$CHROME_DEVEL_SANDBOX"
  echo 'OK'
  echo '[INFO] Start this script again to continue.'
  exit 0
fi

# Utility function to download a copy of Google Chrome from unstable channel and extract its contents.
# If this function is used more than once, only a single copy is downloaded.
google_chrome_unstable() {
  local unstable_path="google-chrome-$( date +%F )"
  cd /tmp
  if [ -d "$unstable_path" ]; then
    cd "$unstable_path"
  else
    mkdir "$unstable_path" && cd "$unstable_path"
    curl -#O 'https://dl.google.com/linux/direct/google-chrome-unstable_current_amd64.deb'
    ar x *.deb
    tar xJf *.tar.lzma
  fi
}

# Install Flash player as Pepper plug-in.
plugin_ppapi_flash_path="${CHROME_DEVEL_PATH}/PepperFlash"
if [ ! -d "$plugin_ppapi_flash_path" ]; then
  echo '[INFO] Installing Flash plug-in...'
  ( \
    google_chrome_unstable &&
    mkdir -p "$plugin_ppapi_flash_path" &&
    cp -R 'opt/google/chrome/PepperFlash/'* "$plugin_ppapi_flash_path" \
  )
fi

# Install PDF viewer as native plug-in.
plugin_native_pdf="${CHROME_DEVEL_PATH}/libpdf.so"
if [ ! -f "$plugin_native_pdf" ]; then
  echo '[INFO] Installing PDF plug-in...'
  ( \
    google_chrome_unstable &&
    cp 'opt/google/chrome/libpdf.so' "$plugin_native_pdf" &&
    chmod 0755 "$plugin_native_pdf" \
  )
fi

# Install ffmpeg from Chrome which has got H.264 playback support.
plugin_native_ffmpeg="${CHROME_DEVEL_PATH}/libffmpegsumo.so"
if [ ! -f "$plugin_native_ffmpeg" ]; then
  echo '[INFO] Installing ffmpeg+h.264 plug-in...'
  ( \
    google_chrome_unstable &&
    cp 'opt/google/chrome/libffmpegsumo.so' "$plugin_native_ffmpeg" &&
    chmod 0755 "$plugin_native_ffmpeg" \
  )
fi

# On Ubuntu 13.04 the libudev.so.0 file is replaced with libudev1.
lib_udev="${CHROME_DEVEL_PATH}/libudev.so.0"
if [ ! -e "$lib_udev" ]; then
  ln -s '/usr/lib/x86_64-linux-gnu/libudev.so' "$lib_udev"
fi

# Use /tmp as the Chromium cache directory.
export XDG_CACHE_HOME='/tmp/.cache'

# Update library lookup path to include Chromium's directory.
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${CHROME_DEVEL_PATH}" 

# Use the `start-and-forget` script to run Chromium detached in the background.
#   --enable-seccomp-sandbox explicitly enables the Linux sandbox.
#   --ignore-gpu-blacklist is an override to enable GPU acceleration on all hardware.
#   --purge-memory-button enables a button in the task manager (available in Tools > Task Manager, or by pressing Shift+Esc).
start-and-forget "${CHROME_DEVEL_PATH}/chrome" \
  --enable-seccomp-sandbox \
  --ignore-gpu-blacklist \
  --purge-memory-button \
  --ppapi-flash-path="${plugin_ppapi_flash_path}/libpepflashplayer.so" \
  --ppapi-flash-version="$( cat "${plugin_ppapi_flash_path}/manifest.json" | grep -i '"version"' | cut -d':' -f2 | tr -d ' ",' )" \
  "$@"
