#!/usr/bin/env bash

# Abort immediately if any command exists with a non-zero code.
set -e

# Do we need 'sudo'?
sudo=
if [ "$( id -u )" != 0 ]; then
  sudo='sudo'
fi

# Set up the default location of Chromium.
if [ -z "$chrome_devel_path" ]; then
  chrome_devel_path='/opt/chrome-linux'
fi

# Utility function to download the latest version of Chromium from continuous builds and extract its contents.
google_chromium_latest() {
  local target="$1"
  local platform="$( uname -i | sed -e 's#x86_#x#' )"
  local version="$( curl -so- "http://commondatastorage.googleapis.com/chromium-browser-continuous/Linux_${platform}/LAST_CHANGE" )"
  local latest_path="/tmp/chrome-linux_${platform}-${version}.zip"
  if [ ! -f "$latest_path" ]; then
    curl -#o "$latest_path" "http://commondatastorage.googleapis.com/chromium-browser-continuous/Linux_${platform}/${version}/chrome-linux.zip"
  fi
  mkdir -p "$target"
  unzip -q "$latest_path" -d "$target"
  mv "${target}/chrome-linux/"* "$target"
  rmdir "${target}/chrome-linux"
}

# If Chromium hasn't been downloaded yet, download the most recent snapshot.
if [ ! -d "$chrome_devel_path" ]; then
  echo "Downloading the latest version of Chromium in '${chrome_devel_path}'..."
  google_chromium_latest "$chrome_devel_path"
fi

# Tell Chromium to use a sandbox.
export CHROME_DEVEL_SANDBOX="${chrome_devel_path}/chrome_sandbox"

if [ ! "$( stat -c'%g:%u' "$CHROME_DEVEL_SANDBOX" | tr -d '\n' )" = '0:0' ]; then
  echo "Updating sandbox owner in '${CHROME_DEVEL_SANDBOX}'..."
  $sudo chown root:root "$CHROME_DEVEL_SANDBOX"
fi

# Chromium is very picky about who owns what and in which mode, set it up properly.
if [ ! "$( stat -c'%f' "$CHROME_DEVEL_SANDBOX" | tr -d '\n' )" = '89ed' ]; then
  echo "Updating sandbox permissions in '${CHROME_DEVEL_SANDBOX}'..."
  $sudo chmod 4755 "$CHROME_DEVEL_SANDBOX"
fi

# Utility function to download a copy of Google Chrome from unstable channel and extract its contents.
# If this function is used more than once, only a single copy is downloaded.
google_chrome_unstable() {
  local unstable_path="google-chrome-$( date +%F )"
  cd /tmp
  if [ -d "$unstable_path" ]; then
    cd "$unstable_path"
  else
    mkdir "$unstable_path" && cd "$unstable_path"
    curl -#O 'https://dl.google.com/linux/direct/google-chrome-unstable_current_amd64.deb'
    ar x *.deb
    tar xJf *.tar.lzma
  fi
}

# Install Flash player as Pepper plug-in.
plugin_ppapi_flash_path="${chrome_devel_path}/PepperFlash"
if [ ! -d "$plugin_ppapi_flash_path" ]; then
  echo 'Installing Flash plug-in...'
  ( \
    google_chrome_unstable &&
    mkdir -p "$plugin_ppapi_flash_path" &&
    cp -R 'opt/google/chrome/PepperFlash/'* "$plugin_ppapi_flash_path" \
  )
fi

# Install PDF viewer as native plug-in.
plugin_native_pdf="${chrome_devel_path}/libpdf.so"
if [ ! -f "$plugin_native_pdf" ]; then
  echo 'Installing PDF plug-in...'
  ( \
    google_chrome_unstable &&
    cp 'opt/google/chrome/libpdf.so' "$plugin_native_pdf" &&
    chmod 0755 "$plugin_native_pdf" \
  )
fi

# Install ffmpeg from Chrome which has got H.264 playback support.
plugin_native_ffmpeg="${chrome_devel_path}/libffmpegsumo.so"
if [ ! -f "$plugin_native_ffmpeg" ]; then
  echo 'Installing ffmpeg+h.264 plug-in...'
  ( \
    google_chrome_unstable &&
    cp 'opt/google/chrome/libffmpegsumo.so' "$plugin_native_ffmpeg" &&
    chmod 0755 "$plugin_native_ffmpeg" \
  )
fi

# On Ubuntu 13.04 the libudev.so.0 file is replaced with libudev1.
lib_udev="${chrome_devel_path}/libudev.so.0"
if [ ! -e "$lib_udev" ]; then
  echo "Adding symbolic link to 'libudev'..."
  ln -s '/usr/lib/x86_64-linux-gnu/libudev.so' "$lib_udev"
fi

# Use /tmp as the Chromium cache directory.
export XDG_CACHE_HOME='/tmp/.cache'

# Update library lookup path to include Chromium's directory (for libudev).
export LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:${chrome_devel_path}"

# Use `nohup` and `disown` to run Chromium detached in the background.
nohup "${chrome_devel_path}/chrome" \
  --enable-seccomp-sandbox `: # explicitly enables the Linux sandbox` \
  --ignore-gpu-blacklist `: # enable GPU acceleration on all hardware` \
  --ppapi-flash-path="${plugin_ppapi_flash_path}/libpepflashplayer.so" \
  --ppapi-flash-version="$( cat "${plugin_ppapi_flash_path}/manifest.json" | grep -i '"version"' | cut -d':' -f2 | tr -d ' ",' )" \
  "$@" 1>/dev/null 2>&1 & disown
