# vi: set ft=php
# <?php
snippet __c
`!p

expand = vim.eval('&expandtab')
tabstop = vim.eval('&shiftwidth')

tab = ' ' * int(tabstop) if expand else '\t'

if len(t[1]):
	snip.rv = ''
	for argument in t[1].split(','):
		if '$' in argument:
			argument = argument.split('=')[0].strip()
			if ' ' in argument:
				[ttype, variable] = argument.split(' ')
			else:
				[ttype, variable] = ['mixed', argument]
			snip.rv += '/**\n' + tab + ' * @var ' + ttype + '\n' + tab + ' */\n' + tab + 'private ' + variable + ';\n\n' + tab
else:
	snip.rv = ''

`/**
 * Initialize a new instance of `!p

import re

snip.rv = 'XXX'
for line in vim.current.buffer:
	captures = re.search('class\s+(\w+)', line)
	if captures:
		snip.rv = captures.group(1)

`.`!p

if len(t[1]):
	snip.rv = '\n' + tab + ' *'
	for argument in t[1].split(','):
		argument = argument.split('=')[0].strip()
		snip.rv += '\n' + tab + ' * @param ' + ('' if ' ' in argument else ('mixed ' if '$' in argument else '')) + argument.strip()
else:
	snip.rv = ''

`
 */
public function __construct(${1})
{`!p

if len(t[1]):
	snip.rv = '';
	for argument in t[1].split(','):
		if '$' in argument:
			variable = argument.split('$')[-1].split(' ')[0]
			if len(variable):
				isNull = ('=' in argument) and ('null' in argument.lower())
				snip.rv += '\n' + tab + tab + ('if (isset ($' + variable + ')) {\n' + tab + tab + tab if isNull else '') + '$this->set' + (variable[0].upper() + variable[1:]) + '($' + variable + ');' + ('\n' + tab + tab + '}' if isNull else '')
else:
	snip.rv = '\n' + tab + tab

`$0
}`!p

if len(t[1]):
	snip.rv = '\n\n' + tab + '# {{{ Getters/Setters'
	for argument in t[1].split(','):
		argument = argument.split('=')[0].strip()
		if '$' in argument:
			if ' ' in argument:
				[ttype, variable] = argument.split(' ')
			else:
				[ttype, variable] = ['mixed', argument]
			variable = variable.lstrip('$')
			if len(variable):
				method = (variable[0].upper() + variable[1:])
				snip.rv += """

	/**
	 * """ + ('Get ' + variable if ttype == 'mixed' else 'Get the ' + ttype + ' instance associated with this object') + """.
	 *
	 * @return """ + ttype + """
	 */
	public function get""" + method + """()
	{
		return $this->""" + variable + """;
	}

	/**
	 * """ + ('Set ' + variable if ttype == 'mixed' else 'Set the ' + ttype + ' instance associated with this object') + """.
	 *
	 * @param """ + ttype + """ $""" + variable + """
	 *
	 * @return void
	 */
	public function set""" + method + """(""" + ('' if ttype == 'mixed' else ttype + ' ') + """$""" + variable + """)
	{
		$this->""" + variable + """ = $""" + variable + """;
	}"""
	snip.rv += '\n\n' + tab + '# }}}'
else:
	snip.rv = ''

`
endsnippet
