# vi: set ft=php :
# <?php
snippet class
`!p
# Create a 'use' statement for the class being tested.
if snip.fn.endswith('Test.php'):
	snip.rv = "use " + re.sub(
		r'/',
		'\\\\',
		re.sub(
			r'^tests/',
			vim.eval('exists("g:projectNamespace") ? g:projectNamespace . "/" : ""'),
			re.sub(
				r'Test$', '', re.sub(
					r'/Tests/', '/', re.sub(
						r'.*src\/', '', os.path.splitext(path)[0]
					)
				)
			)
		)
	) + ";\n\n" # !v substitute(, '\/', '\\', 'g')"
else:
	snip.rv = ""
``!p
# If the file is extending a built-in Exception, mark the class as final.
if snip.fn.endswith('Exception.php') or snip.fn.endswith('Test.php'):
	snip.rv = "final "
elif snip.fn.startswith('Abstract'):
	snip.rv = "abstract "
else:
	snip.rv = ""
``!p
if snip.fn.endswith('Interface.php'):
 snip.rv = "interface"
elif snip.fn.endswith('Trait.php'):
 snip.rv = "trait"
else:
 snip.rv = "class"
` `!v substitute(expand('%:t'), ('\.' . expand('%:e') . '$'), '', 'g')``!p
# Is the file extending a built-in Exception object?
if snip.fn.endswith('Exception.php'):
	snip.rv = " extends \\" + os.path.splitext(os.path.basename(snip.fn))[0] + " implements ExceptionInterface"
elif snip.fn.endswith('Test.php'):
	snip.rv = " extends \PHPUnit_Framework_TestCase"
else:
	snip.rv = ""
`
{`!p snip.rv = "\n" if snip.fn.endswith('Exception.php') else """
	"""`$0`!p snip.rv = "" if snip.fn.endswith('Exception.php') else """
"""`}
endsnippet
