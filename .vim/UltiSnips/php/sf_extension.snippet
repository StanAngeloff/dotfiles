# vi: set ft=php :
# <?php
snippet sf_extension
`!p

if len(t[1]):
	snip.rv  = snip.mkline('use Symfony\\Component\\Config\\FileLocator;')
	snip.rv += "\n"
	snip.rv += "\n"
else:
	snip.rv = ''

`use Symfony\Component\DependencyInjection\ContainerBuilder;
`!p

if len(t[1]):
	snip.rv = snip.mkline('use Symfony\\Component\\DependencyInjection\\Loader\\' + ('Yaml' if t[2] == 'yml' else t[2].capitalize()) + 'FileLoader;')
else:
	snip.rv = ''

`

use Symfony\Component\HttpKernel\DependencyInjection\Extension;

class `!p snip.rv = os.path.splitext(os.path.basename(snip.fn))[0]` extends Extension
{
	/**
	 * {@inheritdoc}
	 */
	public function load(array $configs, ContainerBuilder $container)
	{
		${1:$loader = new `!p

if t[2] == 'yml':
	snip.rv = 'Yaml'
else:
	snip.rv = t[2].capitalize()

`FileLoader($container, new FileLocator(__DIR__ . '/../Resources/config'));

		$loader->load('services.${2:yml}');}`!p

if len(t[1]) and len(t[3]):
	snip.rv = ''
	snip.rv += "\n"
	snip.rv += "\n"
	snip >> 2
	snip.rv += snip.mkline("")
else:
	snip.rv = ''

`${3:$configuration = $this->getConfiguration($configs, $container);
		$config = $this->processConfiguration($configuration, $configs);}$0
	}

	/**
	 * {@inheritdoc}
	 */
	public function getAlias()
	{
		return '`!p

snip.rv = os.path.splitext(os.path.basename(snip.fn))[0][:-9]
snip.rv = re.sub("(.)([A-Z][a-z]+)", r"\1_\2", snip.rv)
snip.rv = re.sub("([a-z0-9])([A-Z])", r"\1_\2", snip.rv).lower()

`';
	}

	/**
	 * {@inheritdoc}
	 */
	public function getConfiguration(array $config, ContainerBuilder $container)
	{
		return new Configuration($this->getAlias());
	}
}
endsnippet
